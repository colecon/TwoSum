/*
 * Cole Constantino | 2 separate algorithms to find the two sum for a target value in an array
 * with Different Space Time Complexities
 */
import java.util.*;
public class Sum {
  
  //Time Complexity: O(n^2) - Nested For loop
  //Space Complexity: O(1) - if Statement to find target
  public static int[] twoSum(int[] nums, int target) {
    int[] targetArr = {0,0};
    int[] none = {-1};
    for(int i = 0; i < nums.length; i++){
      for(int j = 0; j < nums.length; j++){
        if(nums[i] + nums[j] == target && i != j){
          targetArr[0] = i;
          targetArr[1] = j;
          return targetArr;
        }  
      }
    }
    return new int[] {0,0};
  }
  
  //Time Complexity: O(n) - Separated Single For loops O(n+n) = O(n)
  //Space Complexity: O(n) - Saving num array in hashtable requires a for loop
  public static int[] hashTwoSum(int[] nums, int target){
    int[] a = {0,0};
    Hashtable<Integer,Integer> table = new Hashtable<Integer,Integer>();
    //Transfer array into Hashtable
    for(int i = 0; i < nums.length; i++){
      table.put(nums[i],i); 
    }
    int complement = 0; 
    
    for(int j = 0; j < nums.length; j++){
      complement = target - nums[j];
      if(table.containsKey(complement) && table.get(complement) != j){
        return new int[] {j, table.get(complement)};
      }
    }
    
    return a;
  }
  
  public static void main(String[] args){
    int[] a = {3,2,4};
    System.out.println("Method 1: " + Arrays.toString(twoSum(a,6)));
    System.out.println("Method 2: " + Arrays.toString(hashTwoSum(a,6)));
  }
}
